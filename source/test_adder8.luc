module test_adder8 (
    input clk,  // clock
    input rst,  // reset
    input modSelect // Select normal adder module or faulty adder module
    output out, // Used to determine if test passes of fails
    output done, // Used to determine if testing has been completed
    output error // Used to output error

  ) {

  dff counter[30](.clk(clk), .rst(rst));

  sig cases[4]; // Initialises signal cases to only take up to 4 bits, i.e. have 16 test cases
  
  // This imports the adder8 module for testing
  if(modSelect==1) adder8bit add; 
  else faultyAdder add;
  
  always {

    error = 0;
    done = 0;
    out = 0;

    add.a = 8b0; // Initialising input a to adder to be 8 bits
    add.b = 8b0; // Initialising input b to adder to be 8 bits
    add.alufn = 1b0; // Initialising input alufn to adder to be 1 bit
       
    cases = counter.q[29:26]; 
    counter.d = counter.q + 1; // This will increment the last bit of the counter.q by 1 every clk tick, allowing case to change
    case(cases){
      4b0000:                                                // 54 + 6 = 60
        add.a = 8b00110110;
        add.b = 8b00000110;
        add.alufn = 1b0;
        out = (add.out == 8b00111100);
        if(counter.q[DELAY]==1 && out!=8b00111100) error = 1;
        else error = 0;

      4b0001:                                               // 4 - 44 = -40
        add.a = 8b00000100;
        add.b = 8b00101100;
        add.alufn = 1b1; // subtract
        out = (add.out == 8b11011000);
        if(counter.q[DELAY]==1 && out!=8b11011000) error = 1;
        else error = 0;        

      4b0010:                                               // -8 + (-52) = -60
        add.a = 8b11111000; 
        add.b = 8b11001100; 
        add.alufn = 1b0; 
        out = (add.out == 8b11000100); 
        if(counter.q[DELAY]==1 && out!=8b11000100) error = 1;
        else error = 0;

      4b0011:                                               // -60 - (-5) = -55
        add.a = 8b11000100;
        add.b = 8b11111011;
        add.alufn = 1b1;
        out = (add.out == 8b11001001);
        if(counter.q[DELAY]==1 && out!=8b11001001) error = 1;
        else error = 0;

      4b0100:                                               // -54 + 60 = 6
        add.a = 8b11001010;
        add.b = 8b00111100;
        add.alufn = 1b0;
        out = (add.out == 8b00000110);
        if(counter.q[DELAY]==1 && out!=8b00000110) error = 1;
        else error = 0;

      4b0101:                                               // 127 + 127 = 254
        add.a = 8b01111111;
        add.b = 8b01111111;
        add.alufn = 1b0;
        out = (add.out == 8b11111110);
        if(counter.q[DELAY]==1 && out!=8b11111110) error = 1;
        else error = 0;

      4b0110:                                               // -1 + (-1) = (-2)
        add.a = 8b11111111;
        add.b = 8b11111111;
        add.alufn = 1b0;
        out = (add.out == 8b11111110);
        if(counter.q[DELAY]==1 && out!=8b11111110) error = 1;
        else error = 0;

      4b0111:                                               // 0 - 0 = 0
        add.a = 8b00000000;
        add.b = 8b00000000;
        add.alufn = 1b1;
        out = (add.out == 8b00000000);
        if(counter.q[DELAY]==1 && out!=8b00000000) error = 1;
        else error = 0;

      4b1000:                                               // -128 - (-128) = (-256)
        add.a = 8b10000000;
        add.b = 8b10000000;
        add.alufn = 1b1;
        out = (add.out == 8b00000000);
        if(counter.q[DELAY]==1 && out!=8b00000000) error = 1;
        else error = 0;

      4b1001:
        out = 0;
        error = 0;
        done = 1;     // All test cases completed

      default:
        error = 2;
        done = 0; 
    }
  }
}