/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module compare8BitTest_11 (
    input clk,
    input rst,
    output reg error,
    output reg done,
    output reg [7:0] display
  );
  
  
  
  reg [29:0] M_counter_d, M_counter_q = 1'h0;
  
  reg [2:0] test;
  
  wire [1-1:0] M_add_z;
  wire [1-1:0] M_add_v;
  wire [1-1:0] M_add_n;
  wire [8-1:0] M_add_s;
  wire [8-1:0] M_add_ao;
  reg [8-1:0] M_add_a;
  reg [8-1:0] M_add_b;
  reg [1-1:0] M_add_alufn;
  adder8Bit_12 add (
    .a(M_add_a),
    .b(M_add_b),
    .alufn(M_add_alufn),
    .z(M_add_z),
    .v(M_add_v),
    .n(M_add_n),
    .s(M_add_s),
    .ao(M_add_ao)
  );
  
  wire [8-1:0] M_compare_cmp;
  reg [2-1:0] M_compare_alufn;
  reg [1-1:0] M_compare_z;
  reg [1-1:0] M_compare_v;
  reg [1-1:0] M_compare_n;
  compare8Bit_15 compare (
    .alufn(M_compare_alufn),
    .z(M_compare_z),
    .v(M_compare_v),
    .n(M_compare_n),
    .cmp(M_compare_cmp)
  );
  
  always @* begin
    M_counter_d = M_counter_q;
    
    done = 1'h0;
    error = 1'h0;
    M_add_a = 8'h00;
    M_add_b = 8'h00;
    M_add_alufn = 1'h1;
    M_compare_z = M_add_z;
    M_compare_v = M_add_v;
    M_compare_n = M_add_n;
    M_compare_alufn = 2'h0;
    test = M_counter_q[26+2-:3];
    M_counter_d = M_counter_q + 1'h1;
    
    case (test)
      3'h0: begin
        M_add_a = 8'h01;
        M_add_b = 8'h01;
        M_compare_alufn = 2'h1;
        display = 8'h00;
        if (M_counter_q[25+0-:1] == 1'h1) begin
          if (M_compare_cmp != 8'h01) begin
            error = 1'h1;
          end
        end
      end
      3'h1: begin
        M_add_a = 8'h01;
        M_add_b = 8'h03;
        M_compare_alufn = 2'h2;
        display = 8'h01;
        if (M_counter_q[25+0-:1] == 1'h1) begin
          if (M_compare_cmp != 8'h01) begin
            error = 1'h1;
          end
        end
      end
      3'h2: begin
        M_add_a = 8'h01;
        M_add_b = 8'h03;
        M_compare_alufn = 2'h3;
        display = 8'h02;
        if (M_counter_q[25+0-:1] == 1'h1) begin
          if (M_compare_cmp != 8'h01) begin
            error = 1'h1;
          end
        end
      end
      3'h3: begin
        M_add_a = 8'h01;
        M_add_b = 8'h01;
        M_compare_alufn = 2'h3;
        display = 8'h03;
        if (M_counter_q[25+0-:1] == 1'h1) begin
          if (M_compare_cmp != 8'h01) begin
            error = 1'h1;
          end
        end
      end
      3'h4: begin
        display = 8'h04;
        if (M_counter_q[25+0-:1] == 1'h1) begin
          done = 1'h1;
        end
      end
      default: begin
        display = 8'h07;
        done = 1'h0;
        error = 1'h0;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
endmodule
