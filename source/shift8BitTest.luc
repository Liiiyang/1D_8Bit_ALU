module shift8BitTest (
    input clk,  // clock
    input rst,  // reset
    output io_led[3][8], // all LEDs on the io shield
    output done, //to determine if the testing of bool is completed
    output error, //outputs 1 if theres an error and 0 when theres no error
    output display[8]
  ) {
  
  dff counter[30](.clk(clk), .rst(rst));
  const DELAY = 25;
  sig cases[4];
  sig out[8];
  
  shift8Bit shift;

  // fsm state = {};
  
  always {
    io_led = 3x{{8h00}}; // Turn LEDs Off
    error = 0;
    done = 0;

    shift.a = 8b00000001;
    shift.b = 8b00000011; //default shifting of 3 places
    shift.alufn = 2b00;
    
    cases = counter.q[29:26];
    counter.d = counter.q + 1;
    
      case (cases) {
        //shifting left by 3 places when A is 1
        4b0000:
          shift.a = 8b00000001;
          shift.alufn = 2b00;
          display=8b0000;
          if(counter.q[DELAY]==1){
            if(shift.shift!=8b00001000){
             error = 1;
            }
          }
        //shifting right by 3 places when A is 16
        4b0001:
          shift.a = 8b00010000;
          shift.alufn = 2b01;
          display=8b0001;
          if(counter.q[DELAY]==1){
           if(shift.shift!=8b00000010){
            error = 1;
          }
          }
        //shifting right by 3 places with sign conservation
        4b0010:
          shift.a = 8b11000000;
          shift.alufn = 2b11;
          out = (shift.shift == 8b11111000);
          display=8b0010;
          if(counter.q[DELAY]==1){
           if(shift.shift!=8b11111000){
            error = 1;
            }
          }
        //last state: All test cases completed
        4b0011:
         display=8b0011;
         if(counter.q[DELAY]==1){
           done=1;
         }
          
        default:
          display=8b1111;
          error = 0;
          done = 0;
      }
  }
}
