module multiplication8bit_test (
    input clk,  // clock
    input rst,  // reset
    output io_led[3][8], //all leds on io shield    
    output done, // to determine if the testing of multiplcation is completed
    output error,
    output out,
    output display[8]
  ) {
    
  dff counter[30](.clk(clk),.rst(rst));
  sig cases[2];
  const DELAY = 25;
  multiplier8bit multiply;
  
  always {
    io_led = 3x{{8h00}}; // Turn LEDs Off
    done = 0;
    error = 0;
    multiply.a = 8b0; // initialise input a to multiply to be 8bits 
    multiply.b = 8b0; //nitialise input b to multiply to be 8bits  
    cases = counter.q[27:26];
    multiplier8bit.alufn = cases;
    counter.d = counter.q+1;
    
    case(cases){
      2b01: //normal multiplication test case 1: 3*2 = 6
        multiply.a = 8b11;
        multiply.b= 8b10;
        display = 8b00;
        if (counter.q[DELAY] == 1){
          if(multiply.multiply != 8b110){
            error = 1; // go to error state
          }
        }
       
      2b10: // negative multiplication  test case 2 : -3*-3 = 9
        multiply.a = 8b11111101;
        multiply.b = 8b11111101;
        display = 8b01;
        if(counter.q[DELAY]==1){
          if(multiply.multiply != 8b1001){
            error=1; // go to error state
          }
        }
        
      2b11: // multiplication error test case 3: 3*2 = 6 (+1)
        multiply.a = 8b11;
        multiply.b = 8b10;
        multiply.multiply = multiply.multiply + 1;
        if(counter.q[DELAY]==1){
          if(multiply.multiply != 8b110){
            error = 1;
          }
        }  
    }        
  }
}
