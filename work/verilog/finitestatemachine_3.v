/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module finitestatemachine_3 (
    input clk,
    input rst,
    input io_button,
    output reg [15:0] io_value,
    output reg [7:0] display
  );
  
  
  
  wire [1-1:0] M_add_results_done;
  wire [1-1:0] M_add_results_error;
  wire [8-1:0] M_add_results_display;
  reg [1-1:0] M_add_results_rst;
  adder8BitTest_8 add_results (
    .clk(clk),
    .rst(M_add_results_rst),
    .done(M_add_results_done),
    .error(M_add_results_error),
    .display(M_add_results_display)
  );
  wire [24-1:0] M_boole_results_io_led;
  wire [1-1:0] M_boole_results_done;
  wire [1-1:0] M_boole_results_error;
  wire [8-1:0] M_boole_results_display;
  reg [1-1:0] M_boole_results_rst;
  boolean8BitTest_9 boole_results (
    .clk(clk),
    .rst(M_boole_results_rst),
    .io_led(M_boole_results_io_led),
    .done(M_boole_results_done),
    .error(M_boole_results_error),
    .display(M_boole_results_display)
  );
  wire [24-1:0] M_shift_results_io_led;
  wire [1-1:0] M_shift_results_done;
  wire [1-1:0] M_shift_results_error;
  wire [8-1:0] M_shift_results_display;
  reg [1-1:0] M_shift_results_rst;
  shift8BitTest_10 shift_results (
    .clk(clk),
    .rst(M_shift_results_rst),
    .io_led(M_shift_results_io_led),
    .done(M_shift_results_done),
    .error(M_shift_results_error),
    .display(M_shift_results_display)
  );
  wire [1-1:0] M_compare_results_error;
  wire [1-1:0] M_compare_results_done;
  wire [8-1:0] M_compare_results_display;
  reg [1-1:0] M_compare_results_rst;
  compare8BitTest_11 compare_results (
    .clk(clk),
    .rst(M_compare_results_rst),
    .error(M_compare_results_error),
    .done(M_compare_results_done),
    .display(M_compare_results_display)
  );
  localparam IDLE_state = 3'd0;
  localparam ADD_state = 3'd1;
  localparam BOOLE_state = 3'd2;
  localparam SHIFT_state = 3'd3;
  localparam COMPARE_state = 3'd4;
  localparam DONE_state = 3'd5;
  
  reg [2:0] M_state_d, M_state_q = IDLE_state;
  
  always @* begin
    M_state_d = M_state_q;
    
    M_add_results_rst = 1'h0;
    M_boole_results_rst = 1'h0;
    M_shift_results_rst = 1'h0;
    M_compare_results_rst = 1'h0;
    display = 8'h00;
    io_value = 16'h0000;
    M_state_d = M_state_q;
    
    case (M_state_q)
      IDLE_state: begin
        io_value = 16'h9d2e;
        if (io_button == 1'h1) begin
          M_state_d = ADD_state;
          M_add_results_rst = 1'h1;
        end
      end
      ADD_state: begin
        io_value = 16'hadd0;
        display = M_add_results_display;
        if (M_add_results_error == 1'h1) begin
          M_state_d = IDLE_state;
        end else begin
          if (M_add_results_done == 1'h1 && M_add_results_error == 1'h0) begin
            M_boole_results_rst = 1'h1;
            M_state_d = BOOLE_state;
          end
        end
      end
      BOOLE_state: begin
        io_value = 16'hb442;
        display = M_boole_results_display;
        if (M_boole_results_error == 1'h1) begin
          M_state_d = IDLE_state;
        end else begin
          if (M_boole_results_done == 1'h1 && M_boole_results_error == 1'h0) begin
            M_shift_results_rst = 1'h1;
            M_state_d = SHIFT_state;
          end
        end
      end
      SHIFT_state: begin
        io_value = 16'h71f0;
        display = M_shift_results_display;
        if (M_shift_results_error == 1'h1) begin
          M_state_d = IDLE_state;
        end else begin
          if (M_shift_results_done == 1'h1 && M_shift_results_error == 1'h0) begin
            M_compare_results_rst = 1'h1;
            M_state_d = COMPARE_state;
          end
        end
      end
      COMPARE_state: begin
        io_value = 16'hc500;
        display = M_compare_results_display;
        if (M_compare_results_error == 1'h1) begin
          M_state_d = IDLE_state;
        end else begin
          if (M_compare_results_done == 1'h1 && M_compare_results_error == 1'h0) begin
            M_state_d = DONE_state;
          end
        end
      end
      DONE_state: begin
        io_value = 16'hd43e;
        if (io_button == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
