module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
  reset_conditioner reset_cond;
 
  .rst(rst) {
    multi_seven_seg seg;
    finitestatemachine statemachine;
  }
}
  alu8Bit alu;
  
  //adder8BitTest add_test;
 
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    //io_led ={8hFF,8hFF,8hFF};    // turn LEDs off
    //io_seg = 8hff;          // turn segments off
    //io_seg = 8h01; 
    //io_seg = 8h02;         // turn segments off
    //io_sel = 4h00;           // select no digits
    //seg.values = {4h4,4h5,4h6,4h7}; 
    io_led = 3x{{8h00}};    // turn LEDs off
    seg.values = {4d8,4d8,4d0,4d0};
    io_seg = ~seg.seg; // connect segments to the driver
    io_sel = ~seg.sel; // connect digit select to the driver
    
    //io_led[1]=8x{io_button[1]};
    //io_led[0][0]=io_dip[0][0];
    //io_led[0][1]=io_dip[0][1];
    //io_led[0][2]=io_dip[0][2];
    //io_led[0][3]=io_dip[0][3];
    //io_led[0][4]=io_dip[0][4];
    //io_led[0][5]=io_dip[0][5];
    //io_led[0][6]=io_dip[0][6];
    //io_led[0][7]=io_dip[0][7];
    
    //ALU
    alu.a= io_dip[2];
    alu.b=io_dip[1];
    alu.alufn=io_dip[2][5:0];
    io_led[0]= alu.alu;
    
    //Statemachine
    statemachine.io_button=io_button[1];
    seg.values = statemachine.io_value; 
    
    //add_test.modSelect = io_dip[2][6];
    io_led[2] = statemachine.display;
      
  }
}