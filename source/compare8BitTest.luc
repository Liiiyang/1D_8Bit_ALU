module compare8BitTest (
    input clk,  // clock
    input rst,  // reset
    output error,
    output done,
    output display[8]
  ) {
  dff counter[30](.clk(clk),.rst(rst));
  sig test[3];  
  adder8Bit add;
  compare8Bit compare;
  
  always {
  done=0;
  error = 0;
  add.a=8b0;
  add.b=8b0;
  add.alufn=1b1;
  compare.z=add.z;
  compare.v=add.v;
  compare.n=add.n;
  compare.alufn=2b0;
  test=counter.q[28:26];
  counter.d=counter.q+1;
    case(test){
      3b000:
        add.a=8b01;
        add.b=8b01;
        compare.alufn=2b01;
        display=8b000;
        if(counter.q[25]==1){
          if(compare.cmp!=8b01){
              error=1;
            }
        }//testing a >= b when ALUFN is 11 
        
      3b001:
        add.a = 8b00000001;
        add.b = 8b00000011;
        compare.alufn = 2b10;
        display=8b001;
        if(counter.q[25]==1){
            if(compare.cmp != 8b00000001){ //shows 1 cause we defined A > B)
              error=1;
            }
        }//testing a >= b when ALUFN is 11 
      3b010:
        add.a = 8b00000001;
        add.b = 8b00000011;
        compare.alufn = 2b11;
        display=8b010;
        if(counter.q[25]==1){
            if(compare.cmp != 8b00000001){ //shows 1 cause we defined A > B)
              error=1;
            }
        }//making A = B when ALUFN is 11
      3b011:
          add.a = 8b00000001;
          add.b = 8b00000001;
          compare.alufn = 2b11;
          display=8b011;
          if(counter.q[25]==1){
            if(compare.cmp != 8b00000001){ //shows 1 cause we defined A > B)
              error=1;
            }
        }
       3b100:
          display=8b100;
          done = 1;
        default:
          display=8b111;
          done  = 0; 
          error = 0; 
    }
  }

}
