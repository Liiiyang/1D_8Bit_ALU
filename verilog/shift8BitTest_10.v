/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module shift8BitTest_10 (
    input clk,
    input rst,
    output reg [23:0] io_led,
    output reg done,
    output reg error,
    output reg [7:0] display
  );
  
  
  
  reg [29:0] M_counter_d, M_counter_q = 1'h0;
  
  localparam DELAY = 5'h19;
  
  reg [3:0] cases;
  
  reg [7:0] out;
  
  wire [8-1:0] M_shift_shift;
  reg [8-1:0] M_shift_a;
  reg [3-1:0] M_shift_b;
  reg [2-1:0] M_shift_alufn;
  shift8Bit_14 shift (
    .a(M_shift_a),
    .b(M_shift_b),
    .alufn(M_shift_alufn),
    .shift(M_shift_shift)
  );
  
  always @* begin
    M_counter_d = M_counter_q;
    
    io_led = 24'h000000;
    error = 1'h0;
    done = 1'h0;
    M_shift_a = 8'h01;
    M_shift_b = 8'h03;
    M_shift_alufn = 2'h0;
    cases = M_counter_q[26+3-:4];
    M_counter_d = M_counter_q + 1'h1;
    
    case (cases)
      4'h0: begin
        M_shift_a = 8'h01;
        M_shift_alufn = 2'h0;
        display = 8'h00;
        if (M_counter_q[25+0-:1] == 1'h1) begin
          if (M_shift_shift != 8'h08) begin
            error = 1'h1;
          end
        end
      end
      4'h1: begin
        M_shift_a = 8'h10;
        M_shift_alufn = 2'h1;
        display = 8'h01;
        if (M_counter_q[25+0-:1] == 1'h1) begin
          if (M_shift_shift != 8'h02) begin
            error = 1'h1;
          end
        end
      end
      4'h2: begin
        M_shift_a = 8'hc0;
        M_shift_alufn = 2'h3;
        out = (M_shift_shift == 8'hf8);
        display = 8'h02;
        if (M_counter_q[25+0-:1] == 1'h1) begin
          if (M_shift_shift != 8'hf8) begin
            error = 1'h1;
          end
        end
      end
      4'h3: begin
        display = 8'h03;
        if (M_counter_q[25+0-:1] == 1'h1) begin
          done = 1'h1;
        end
      end
      default: begin
        display = 8'h0f;
        error = 1'h0;
        done = 1'h0;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
endmodule
