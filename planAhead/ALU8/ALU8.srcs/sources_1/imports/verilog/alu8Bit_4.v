/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu8Bit_4 (
    input [7:0] a,
    input [7:0] b,
    input [5:0] alufn,
    output reg [7:0] alu
  );
  
  
  
  wire [1-1:0] M_add_z;
  wire [1-1:0] M_add_v;
  wire [1-1:0] M_add_n;
  wire [8-1:0] M_add_s;
  wire [8-1:0] M_add_ao;
  reg [8-1:0] M_add_a;
  reg [8-1:0] M_add_b;
  reg [1-1:0] M_add_alufn;
  adder8Bit_12 add (
    .a(M_add_a),
    .b(M_add_b),
    .alufn(M_add_alufn),
    .z(M_add_z),
    .v(M_add_v),
    .n(M_add_n),
    .s(M_add_s),
    .ao(M_add_ao)
  );
  
  wire [8-1:0] M_bool_boole;
  reg [8-1:0] M_bool_a;
  reg [8-1:0] M_bool_b;
  reg [4-1:0] M_bool_alufn;
  boole8Bit_13 bool (
    .a(M_bool_a),
    .b(M_bool_b),
    .alufn(M_bool_alufn),
    .boole(M_bool_boole)
  );
  
  wire [8-1:0] M_shift_shift;
  reg [8-1:0] M_shift_a;
  reg [3-1:0] M_shift_b;
  reg [2-1:0] M_shift_alufn;
  shift8Bit_14 shift (
    .a(M_shift_a),
    .b(M_shift_b),
    .alufn(M_shift_alufn),
    .shift(M_shift_shift)
  );
  
  wire [8-1:0] M_cmp_cmp;
  reg [2-1:0] M_cmp_alufn;
  reg [1-1:0] M_cmp_z;
  reg [1-1:0] M_cmp_v;
  reg [1-1:0] M_cmp_n;
  compare8Bit_15 cmp (
    .alufn(M_cmp_alufn),
    .z(M_cmp_z),
    .v(M_cmp_v),
    .n(M_cmp_n),
    .cmp(M_cmp_cmp)
  );
  
  wire [8-1:0] M_mul_mul;
  reg [8-1:0] M_mul_a;
  reg [8-1:0] M_mul_b;
  reg [1-1:0] M_mul_alufn;
  multiplier8Bit_16 mul (
    .a(M_mul_a),
    .b(M_mul_b),
    .alufn(M_mul_alufn),
    .mul(M_mul_mul)
  );
  
  always @* begin
    M_add_a = a;
    M_add_b = b;
    M_add_alufn = alufn[0+0-:1];
    M_bool_a = a;
    M_bool_b = b;
    M_bool_alufn = alufn[0+3-:4];
    M_shift_a = a;
    M_shift_b = b[0+2-:3];
    M_shift_alufn = alufn[0+1-:2];
    M_cmp_z = M_add_z;
    M_cmp_v = M_add_v;
    M_cmp_n = M_add_n;
    M_cmp_alufn = alufn[1+1-:2];
    M_mul_a = a;
    M_mul_b = b;
    M_mul_alufn = alufn[0+0-:1];
    
    case (alufn[4+1-:2])
      2'h0: begin
        if (alufn[1+0-:1]) begin
          alu = M_mul_mul;
        end else begin
          alu = M_add_s;
        end
      end
      2'h1: begin
        alu = M_bool_boole;
      end
      2'h2: begin
        alu = M_shift_shift;
      end
      2'h3: begin
        alu = M_cmp_cmp;
      end
      default: begin
        alu = 8'h00;
      end
    endcase
  end
endmodule
